# -*- coding: utf-8 -*-
"""smoking-related-lung-cancers-cancers-prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XONJtjLYJByPPU3RqSVEQOM6eGHTwL0g
"""

from google.colab import files
uploaded = files.upload()

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
from pandas_profiling.profile_report import ProfileReport
from matplotlib import pyplot as plt
from imblearn.over_sampling import SMOTE

from sklearn.neural_network import MLPClassifier
from sklearn.model_selection import train_test_split
from sklearn.model_selection import ParameterGrid
from sklearn.model_selection import GridSearchCV
from sklearn import model_selection, metrics, preprocessing, ensemble, model_selection, metrics
from sklearn.pipeline import make_pipeline
from sklearn.compose import make_column_transformer
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier, BaggingClassifier, GradientBoostingClassifier,AdaBoostClassifier
from sklearn.naive_bayes import GaussianNB, MultinomialNB, BernoulliNB
from sklearn.model_selection import cross_val_score
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import classification_report, confusion_matrix

from imblearn.over_sampling import RandomOverSampler
from imblearn.under_sampling import RandomUnderSampler
from imblearn.over_sampling import SMOTE


# %matplotlib inline

dataset = pd.read_csv('/content/lung_cancer.csv')

df = dataset.copy(deep=True)

df.head()

df.shape

pr = ProfileReport(df)
pr.to_notebook_iframe()

df.isnull().sum()

"""# Data where DAYS_TO_CANCER and STAGE_OF_CANCER is null"""

dtc_soc_null = df[df.days_to_cancer.isnull() & df.stage_of_cancer.isnull()]
dtc_soc_null.head()

dtc_soc_null.shape

"""# Data where DAYS_TO_CANCER or STAGE_OF_CANCER is not null

* this single sample is an outlier an we can remove this
"""

df[(~df.days_to_cancer.isnull() & df.stage_of_cancer.isnull()) | (df.days_to_cancer.isnull() & ~df.stage_of_cancer.isnull())]

df.drop(index=25977,inplace=True)

"""# Ordinal Encoding
* in column **stage_of_cancer** nan means no cancer.
* change conver it to ordinal   **IA: 1, IB : 2, IIA : 3, IIB : 4, IIIA : 5, IIIB : 6, IV: 7**
* For **stage_of_cancer**, **days_to_cancer** and **race** column replace **nan** with 0
* change the datatype of **stage_of_cancer** and **days_to_cancer** to int
"""

df.stage_of_cancer = df.stage_of_cancer.replace({'IA': 1, 'IB' : 2, 'IIA':3,'IIB':4, 'IIIA': 5, 'IIIB': 6, 'IV':7})
df=df.fillna({'stage_of_cancer': 0, 'days_to_cancer': 0, 'race': 'Others'})
df[['stage_of_cancer', 'days_to_cancer']] = df[['stage_of_cancer', 'days_to_cancer']].astype('int')

df.isnull().sum()

"""# Function To Plot Gender, Smoker, Age, Race, Cancer Stage"""

def diff_plot(df):
    plt.figure(1,figsize=(20,15))
    plt.subplot(3,3,1)
    df.gender.value_counts().plot.pie(autopct='%.2f')
    plt.subplot(3,3,2)
    df.smoker.value_counts().plot.pie(autopct='%.2f')
    plt.subplot(3,3,3)
    df.age.value_counts().plot.bar()
    plt.subplot(3,3,4)
    df.race.value_counts().plot.bar()
    plt.subplot(3,3,5)
    df.stage_of_cancer.value_counts().plot.bar()
    plt.show()

diff_plot(df)

"""# Function to train model and check the accuracy and F1-Score"""

def train_model(clf,col_trf, X_train,y_train,X_test,y_test):
    pipe = make_pipeline(col_trf,clf) if col_trf else make_pipeline(clf)
    pipe.fit(X_train,y_train)
    y_pred_train = pipe.predict(X_train)
    y_pred_test = pipe.predict(X_test)

    accuracy_train = metrics.accuracy_score(y_pred_train, y_train)
    accuracy_test = metrics.accuracy_score(y_pred_test, y_test)
    print("Train accuracy: ", accuracy_train, "F1-scoare: ", metrics.f1_score(y_train, y_pred_train,average='weighted'))
    print("Test accuracy: ", accuracy_test, "F1-scoare: ", metrics.f1_score(y_test, y_pred_test,average='weighted'))

    print(confusion_matrix(y_test,y_pred_test))

    print()
    return pipe

"""# Function to Train and text there accuracy on differnt models"""

def test_diff_models(col_trf,X_train,y_train,X_test,y_test):

    print("\n***********LogisticRegression************\n")
    train_model(LogisticRegression(solver='lbfgs',max_iter=1000),col_trf, X_train,y_train,X_test,y_test)
    print("\n********************************\n")


#     print("\n***********BaggingClassifier(LogisticRegression)************\n")
#     train_model(BaggingClassifier(LogisticRegression(),n_estimators=100,n_jobs=-1),col_trf, X_train,y_train,X_test,y_test)
#     print("\n********************************\n")


#     print("\n***********BaggingClassifier(LogisticRegression) bootstrap bootstrap_features oob_score ************\n")
#     train_model(
#         BaggingClassifier(LogisticRegression(),n_estimators=100, bootstrap=True, bootstrap_features=True, oob_score=True,n_jobs=-1),
#         col_trf, X_train,y_train,X_test,y_test)
#     print("\n********************************\n")


#     print("\n***********RandomForestClassifier************\n")
#     train_model(RandomForestClassifier(),col_trf, X_train,y_train,X_test,y_test)
#     print("\n********************************\n")

#     print("\n***********ExtraTreesClassifier************\n")
#     train_model(ExtraTreesClassifier(),col_trf, X_train,y_train,X_test,y_test)
#     print("\n********************************\n")







    print("\n***********GaussianNB************\n")
    train_model(GaussianNB(),col_trf, X_train,y_train,X_test,y_test)
    print("\n********************************\n")

"""# Feature Transformation | One Hot Encoding"""

df.head()

X = df.drop(columns=['stage_of_cancer'])
y = df.stage_of_cancer

ohe = (OneHotEncoder(),['gender','race','smoker'])

col_trf = make_column_transformer(ohe, remainder='passthrough')

X_train,X_test,y_train,y_test = train_test_split(X, y, random_state=42, test_size=0.5, shuffle=True,stratify=y)


test_diff_models(col_trf,X_train,y_train,X_test,y_test)



"""# Handling Imbalance Data

* After Seeing above graph it looks like we have imbalance data alot in target column (stage_of_cancer).
    * RandomOverSampler
    * RandomUnderSampler
    * SMOTE

# RandomOverSampler
"""

ros = RandomOverSampler(random_state=42)
X_res, y_res = ros.fit_resample(X, y)

X_train,X_test,y_train,y_test = train_test_split(X_res, y_res, random_state=42, test_size=0.2, shuffle=True,stratify=y_res)


test_diff_models(col_trf,X_train,y_train,X_test,y_test)

"""# RandomUnderSampler"""

rus = RandomUnderSampler(random_state=42)
X_res, y_res = rus.fit_resample(X, y)

X_train,X_test,y_train,y_test = train_test_split(X_res, y_res, random_state=42, test_size=0.2, shuffle=True,stratify=y_res)


test_diff_models(col_trf,X_train,y_train,X_test,y_test)

"""# SMOTE"""

df.head()

df_encoded=pd.get_dummies(df)
df_encoded=df_encoded.reset_index(drop=True)

X = df_encoded.drop(columns=['stage_of_cancer'])
y = df_encoded.stage_of_cancer

sm = SMOTE(random_state=42)
X_res, y_res = sm.fit_resample(X, y)

X_train,X_test,y_train,y_test = train_test_split(X_res, y_res, random_state=42, test_size=0.2, shuffle=True,stratify=y_res)


test_diff_models(None,X_train,y_train,X_test,y_test)

"""# Decision Tree Classifier"""

pipe = train_model(DecisionTreeClassifier(min_samples_leaf=3),None,X_train,y_train,X_test,y_test)

"""# Clasify Cancer"""

df['is_cancer']  = (df.stage_of_cancer != 0).astype('int')

df.sample(10)

df.is_cancer.value_counts().plot.pie()

df_encoded=pd.get_dummies(df,columns=['gender','race','smoker'])
df_encoded=df_encoded.reset_index(drop=True)

X = df_encoded.drop(columns=['is_cancer'])
y = df_encoded.is_cancer

"""# classification for cancer without sampling"""

X_train,X_test,y_train,y_test = train_test_split(X, y, random_state=42, test_size=0.2, shuffle=True,stratify=y)


test_diff_models(None,X_train,y_train,X_test,y_test)



"""# classification for cancer RandomOverSampler"""

df_encoded=pd.get_dummies(df,columns=['gender','race','smoker'])
df_encoded=df_encoded.reset_index(drop=True)

X = df_encoded.drop(columns=['is_cancer'])
y = df_encoded.is_cancer

ros = RandomOverSampler(random_state=42)
X_res, y_res = ros.fit_resample(X, y)

X_train,X_test,y_train,y_test = train_test_split(X_res, y_res, random_state=42, test_size=0.2, shuffle=True,stratify=y_res)

test_diff_models(None,X_train,y_train,X_test,y_test)

"""# classification for cancer RandomUnderSampler"""

df_encoded=pd.get_dummies(df,columns=['gender','race','smoker'])
df_encoded=df_encoded.reset_index(drop=True)

X = df_encoded.drop(columns=['is_cancer'])
y = df_encoded.is_cancer

rus = RandomUnderSampler(random_state=42)
X_res, y_res = rus.fit_resample(X, y)

X_train,X_test,y_train,y_test = train_test_split(X_res, y_res, random_state=42, test_size=0.2, shuffle=True,stratify=y_res)

test_diff_models(None,X_train,y_train,X_test,y_test)

"""# classification for cancer SOMTE"""

df_encoded=pd.get_dummies(df,columns=['gender','race','smoker'])
df_encoded=df_encoded.reset_index(drop=True)

X = df_encoded.drop(columns=['is_cancer','days_to_cancer'])
y = df_encoded.is_cancer

sm = SMOTE(random_state=42)
X_res, y_res = sm.fit_resample(X, y)

X_train,X_test,y_train,y_test = train_test_split(X_res, y_res, random_state=42, test_size=0.2, shuffle=True,stratify=y_res)

